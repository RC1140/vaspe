Original Questions : 

A description of the binary file format. For example:
    What does the bytecode file header look like?
    What determines where execution will start once the bytecode is loaded in the VM?
    Does the architecture contain other parts of memory (like a stack) where it can store data and operate on them?


The instruction set including their impact on the runtime memory. You should:
    Find all instructions that the EvilGroupVM.exe accepts
    Analyse each of them and understand how they make changes to the runtime memory of the bytecodes thread


Write a proof of concept self modifying bytecode file that prints your name to the screen. The binary must be self modifying, that is, you may not use the "print_char" instruction directly, rather, the binary must modify itself if it wants to make use of "print_char".

For the advanced challenge, if you have the ability and time, send us back a C file that, when compiled, will give an almost exact match compared to EvilGroupVM (Ubuntu Linux) or EvilGroupVM.exe (Windows). Focus on getting pointer arithmetic and data structures correct.

-------------------------------------------

Hexdump helloworld :  file length 256 bytes

0000000 6765 6d76 6962 616e 7972 0000 0000 0000
0000010 6012 010b 010b 010b 010b 010b 010b 010b
0000020 010b 010b 010b 010b 010b 010b 010b 010b
0000030 000b 0000 0000 0000 0000 0000 0000 0000
0000040 0000 0000 0000 0000 0000 0000 0000 0000
0000050 0a00 3a29 2120 6c64 6f72 2057 6c6f 656c
0000060 0048 0000 0000 0000 0000 0000 0000 0000
0000070 0000 0000 0000 0000 0000 0000 0000 0000

-------------------------------------------

./EvilGroupVM helloworld 

Output : 

Header matched. The binary is being loaded to runtime memory
and thread context will be initialized

Instruction pointer initialized to offset 0x12 and value 0xb
Stack pointer initialized to offest 0x60 and value 0x48

Thread context initialized, execution begins

Hello World! :)

---------------------------------------------

File needs to be at least 256 bytes

first line of the file needs to be 

0000000 6765 6d76 6962 616e 7972 0000 0000 0000  

this translates to the following in ascii : egvmbinary (Evil Group VM Binary)

First byte of the second line is the stack init pointer.

0000010 6012 010b 010b 010b 010b 010b 010b 010b 

second byte is the ip pointer or the location of the first 
